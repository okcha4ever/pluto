generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Company {
    id          String    @id @default(nanoid())
    name        String
    ceoId       String
    category    String
    upvotes     String[]
    increment   Int?      @default(0)
    description String
    ceo         User      @relation(fields: [ceoId], references: [id], onDelete: Cascade)
    type        String
    Comment     Comment[]
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    expires      DateTime
    userId       String
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    occupation    String?
    accounts      Account[]
    sessions      Session[]
    companies     Company[]
    comments      Comment[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Comment {
    id        String  @id @default(nanoid())
    userId    String
    user      User    @relation(fields: [userId], references: [id])
    companyId String
    company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
    content   String
}
