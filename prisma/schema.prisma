generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Company {
    id          String      @id @default(nanoid())
    name        String
    ceoId       String
    category    String
    upvotes     String[]
    increment   Int?         @default(0)
    description String
    ceo         User        @relation(fields: [ceoId], references: [id], onDelete: Cascade)
    type        String
    Comments    Comment[]
    image       String
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    expires      DateTime
    userId       String
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    occupation    String?
    accounts      Account[]
    sessions      Session[]
    Company       Company[]
    Comments       Comment[]
}

model Comment {
    id        String   @id @default(cuid())
    content   String
    userId    String
    companyId String
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    company   Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
